package com.softannate.apppuentedecomunicacion.data.api;

import com.softannate.apppuentedecomunicacion.modelos.Alumno;
import com.softannate.apppuentedecomunicacion.modelos.CambioPass;
import com.softannate.apppuentedecomunicacion.modelos.Categoria_Mensaje;
import com.softannate.apppuentedecomunicacion.modelos.EstadoAsistencia;
import com.softannate.apppuentedecomunicacion.modelos.dto.LoginDTO;
import com.softannate.apppuentedecomunicacion.modelos.dto.LoginResponseDTO;
import com.softannate.apppuentedecomunicacion.modelos.Materia;
import com.softannate.apppuentedecomunicacion.modelos.dto.MensajeDTO;
import com.softannate.apppuentedecomunicacion.modelos.Nivel;
import com.softannate.apppuentedecomunicacion.modelos.dto.OlvidaPassDTO;
import com.softannate.apppuentedecomunicacion.modelos.RestablecerPass;
import com.softannate.apppuentedecomunicacion.modelos.Rol;
import com.softannate.apppuentedecomunicacion.modelos.TipoActividad;
import com.softannate.apppuentedecomunicacion.modelos.Usuario;
import com.softannate.apppuentedecomunicacion.modelos.dto.RefreshTokenDto;
import java.util.Date;
import java.util.List;
import okhttp3.MultipartBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Multipart;
import retrofit2.http.PATCH;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.Query;

public interface Endpoints {

    //Login - Funcionando
    @POST("auth/login")
    Call<LoginResponseDTO> login(@Body LoginDTO login);

    //Olvidé Pass
    @POST("usuario/olvidoPass")
    Call<ResponseBody> enviarEmail(@Body OlvidaPassDTO dto);

    //Logout - Funcionando
    @POST("auth/logout")
    Call<Void> logout(@Body RefreshTokenDto refreshToken);

    //Mensajes
    @GET("mensaje")
    Call<List<MensajeDTO>> mensajes();

    //Categorias
    @GET("categoria")
    Call<List<Categoria_Mensaje>> categorias();

    //Conversacion
    @GET("mensaje/{receptorId}")
    Call<List<MensajeDTO>> conversacion(@Path("receptorId") int receptorId);

    @GET("mensaje/{receptorId}")
    Call<List<MensajeDTO>> conversacionConAlumno(@Path("receptorId") int receptorId,@Query("alumnoId") int alumnoId );

    @GET("conversacion/{receptorId}")
    Call<List<MensajeDTO>> conversacionAjenaConAlumno(
            @Path("receptorId") int receptorId,
            @Query("alumnoId") int alumnoId,
            @Query("otroParticipanteId") int otroParticipanteId
    );

    //Conversacion, marcar como leído
    @PUT("mensaje/leidos")
    Call<Void> mensajesLeidos(@Query("emisorId") int receptorId);

    @PUT("mensaje/leidos")
    Call<Void> mensajesLeidosConAlumnos(@Query("emisorId") int receptorId,@Query("alumnoId") int alumnoId );

    //Buscar
    @GET("mensaje/buscar")
    Call<List<MensajeDTO>> buscar( @Query("busqueda") String busqueda, @Query("fechaInicio") String fechaInicio, @Query("fechaFin") String fechaFin );

    /**
     *  Método para autenticación de usuario
     *  Endpoint: POST /auth/login
     *  Parámetro en el cuerpo (`@Body`): `AuthDto authDto` → Contiene las credenciales del usuario (email y password).
     *  Retorno: `Call<TokenDto>` → Devuelve un objeto con el `accessToken` y `refreshToken`.
     *  Funcionamiento:
     *    - Envía los datos de `authDto` al servidor.
     *    - Si la autenticación es exitosa, recibe el `accessToken` y lo almacena.
     *    - Si falla, responde con `500 Error interno del servidor`.
     */
    //Niveles
    @GET("nivel")
    Call<List<Nivel>> niveles();

    //EstadosAsistencias
    @GET("estadoAsistencia")
    Call<List<EstadoAsistencia>> estadosAsistencias();

    //Materias
    @GET("materia")
    Call<List<Materia>> materias();

    //Roles
    @GET("rol")
    Call<List<Rol>> roles();

    //TiposActividades
    @GET("tipoActividad")
    Call<List<TipoActividad>> tiposActividades();





    //Restablecer Pass
    @POST("usuario/restablecerPass")
    Call<ResponseBody> restablecerPass(@Body RestablecerPass dto, @Header("Authorization") String token);

    //Profile
    @GET("usuario/profile")
    Call<Usuario> profile(@Header("Authorization") String token);

    //Update
    @PUT("usuario/update")
    Call<Usuario> update(@Header("Authorization")String token, @Body Usuario usuario);

    //Avatar
    @PATCH("usuario/avatar")
    @Multipart
    Call<ResponseBody> updateAvatar(@Header("Authorization") String token, @Part MultipartBody.Part file
    );

    //Eliminar Avatar
    @DELETE("usuario/avatar")
    Call<String> deleteAvatar(@Header("Authorization") String token);

    //Cambiar Pass
    @PATCH("usuario/pass")
    Call<ResponseBody> cambiarPass(@Header("Authorization") String token, @Body CambioPass pass);

    //Alumnos
    @GET("alumno/tutor")
    Call<List<Alumno>> alumnos(@Header("Authorization") String token);

    //Mensajes


    @GET("mensaje/{id}/respuestas")
    Call<List<MensajeDTO>>  respuestas(@Header("Authorization") String token, @Path("id") int id);

    @GET("mensaje/conversacion/{mensajeId}/{usuarioId}")
    Call<List<MensajeDTO>> conversacion(@Header("Authorization") String token, @Path("mensajeId") int mensajeId, @Path("usuarioId") int usuarioId);

    @GET("mensaje/destinatarios/{alumnoId}")
    Call<List<Usuario>> destinatarios(@Header("Authorization") String token,@Path("alumnoId") int alumnoId);

}


